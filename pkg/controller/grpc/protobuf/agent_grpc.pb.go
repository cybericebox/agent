// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: agent.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Agent_CreateLab_FullMethodName            = "/agent.Agent/CreateLab"
	Agent_DeleteLabs_FullMethodName           = "/agent.Agent/DeleteLabs"
	Agent_AddLabsChallenges_FullMethodName    = "/agent.Agent/AddLabsChallenges"
	Agent_DeleteLabsChallenges_FullMethodName = "/agent.Agent/DeleteLabsChallenges"
	Agent_GetLabs_FullMethodName              = "/agent.Agent/GetLabs"
	Agent_StartChallenge_FullMethodName       = "/agent.Agent/StartChallenge"
	Agent_StopChallenge_FullMethodName        = "/agent.Agent/StopChallenge"
	Agent_ResetChallenge_FullMethodName       = "/agent.Agent/ResetChallenge"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// laboratory
	CreateLab(ctx context.Context, in *CreateLabRequest, opts ...grpc.CallOption) (*CreateLabResponse, error)
	DeleteLabs(ctx context.Context, in *DeleteLabsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddLabsChallenges(ctx context.Context, in *AddLabsChallengesRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteLabsChallenges(ctx context.Context, in *DeleteLabsChallengesRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetLabs(ctx context.Context, in *GetLabsRequest, opts ...grpc.CallOption) (*GetLabsResponse, error)
	// challenge
	StartChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	StopChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ResetChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) CreateLab(ctx context.Context, in *CreateLabRequest, opts ...grpc.CallOption) (*CreateLabResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLabResponse)
	err := c.cc.Invoke(ctx, Agent_CreateLab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteLabs(ctx context.Context, in *DeleteLabsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Agent_DeleteLabs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddLabsChallenges(ctx context.Context, in *AddLabsChallengesRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Agent_AddLabsChallenges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteLabsChallenges(ctx context.Context, in *DeleteLabsChallengesRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Agent_DeleteLabsChallenges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetLabs(ctx context.Context, in *GetLabsRequest, opts ...grpc.CallOption) (*GetLabsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLabsResponse)
	err := c.cc.Invoke(ctx, Agent_GetLabs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StartChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Agent_StartChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StopChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Agent_StopChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ResetChallenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Agent_ResetChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	// laboratory
	CreateLab(context.Context, *CreateLabRequest) (*CreateLabResponse, error)
	DeleteLabs(context.Context, *DeleteLabsRequest) (*EmptyResponse, error)
	AddLabsChallenges(context.Context, *AddLabsChallengesRequest) (*EmptyResponse, error)
	DeleteLabsChallenges(context.Context, *DeleteLabsChallengesRequest) (*EmptyResponse, error)
	GetLabs(context.Context, *GetLabsRequest) (*GetLabsResponse, error)
	// challenge
	StartChallenge(context.Context, *ChallengeRequest) (*EmptyResponse, error)
	StopChallenge(context.Context, *ChallengeRequest) (*EmptyResponse, error)
	ResetChallenge(context.Context, *ChallengeRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) CreateLab(context.Context, *CreateLabRequest) (*CreateLabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLab not implemented")
}
func (UnimplementedAgentServer) DeleteLabs(context.Context, *DeleteLabsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabs not implemented")
}
func (UnimplementedAgentServer) AddLabsChallenges(context.Context, *AddLabsChallengesRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabsChallenges not implemented")
}
func (UnimplementedAgentServer) DeleteLabsChallenges(context.Context, *DeleteLabsChallengesRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabsChallenges not implemented")
}
func (UnimplementedAgentServer) GetLabs(context.Context, *GetLabsRequest) (*GetLabsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabs not implemented")
}
func (UnimplementedAgentServer) StartChallenge(context.Context, *ChallengeRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChallenge not implemented")
}
func (UnimplementedAgentServer) StopChallenge(context.Context, *ChallengeRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChallenge not implemented")
}
func (UnimplementedAgentServer) ResetChallenge(context.Context, *ChallengeRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetChallenge not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_CreateLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_CreateLab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateLab(ctx, req.(*CreateLabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteLabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteLabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteLabs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteLabs(ctx, req.(*DeleteLabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddLabsChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabsChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddLabsChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_AddLabsChallenges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddLabsChallenges(ctx, req.(*AddLabsChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteLabsChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabsChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteLabsChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteLabsChallenges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteLabsChallenges(ctx, req.(*DeleteLabsChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetLabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetLabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetLabs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetLabs(ctx, req.(*GetLabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StartChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).StartChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_StartChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).StartChallenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StopChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).StopChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_StopChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).StopChallenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ResetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ResetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ResetChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ResetChallenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLab",
			Handler:    _Agent_CreateLab_Handler,
		},
		{
			MethodName: "DeleteLabs",
			Handler:    _Agent_DeleteLabs_Handler,
		},
		{
			MethodName: "AddLabsChallenges",
			Handler:    _Agent_AddLabsChallenges_Handler,
		},
		{
			MethodName: "DeleteLabsChallenges",
			Handler:    _Agent_DeleteLabsChallenges_Handler,
		},
		{
			MethodName: "GetLabs",
			Handler:    _Agent_GetLabs_Handler,
		},
		{
			MethodName: "StartChallenge",
			Handler:    _Agent_StartChallenge_Handler,
		},
		{
			MethodName: "StopChallenge",
			Handler:    _Agent_StopChallenge_Handler,
		},
		{
			MethodName: "ResetChallenge",
			Handler:    _Agent_ResetChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
