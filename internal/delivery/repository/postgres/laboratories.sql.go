// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: laboratories.sql

package postgres

import (
	"context"
	"net/netip"

	"github.com/gofrs/uuid"
)

const createLaboratory = `-- name: CreateLaboratory :exec
insert into laboratories (id, group_id, cidr)
values ($1, $2, $3)
`

type CreateLaboratoryParams struct {
	ID      uuid.UUID    `json:"id"`
	GroupID uuid.UUID    `json:"group_id"`
	Cidr    netip.Prefix `json:"cidr"`
}

func (q *Queries) CreateLaboratory(ctx context.Context, arg CreateLaboratoryParams) error {
	_, err := q.db.Exec(ctx, createLaboratory, arg.ID, arg.GroupID, arg.Cidr)
	return err
}

const deleteLaboratory = `-- name: DeleteLaboratory :execrows
delete
from laboratories
where id = $1
`

func (q *Queries) DeleteLaboratory(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteLaboratory, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getLaboratories = `-- name: GetLaboratories :many
select id, group_id, cidr, updated_at, created_at
from laboratories
where group_id = coalesce($1, group_id)
`

func (q *Queries) GetLaboratories(ctx context.Context, groupID uuid.NullUUID) ([]Laboratory, error) {
	rows, err := q.db.Query(ctx, getLaboratories, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Laboratory{}
	for rows.Next() {
		var i Laboratory
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Cidr,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
